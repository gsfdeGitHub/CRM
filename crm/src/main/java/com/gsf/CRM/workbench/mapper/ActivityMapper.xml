<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gsf.CRM.workbench.mapper.ActivityMapper">
  <resultMap id="BaseResultMap" type="com.gsf.CRM.workbench.pojo.Activity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="owner" jdbcType="CHAR" property="owner" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="start_date" jdbcType="CHAR" property="startDate" />
    <result column="end_date" jdbcType="CHAR" property="endDate" />
    <result column="cost" jdbcType="VARCHAR" property="cost" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="create_time" jdbcType="CHAR" property="createTime" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="edit_time" jdbcType="CHAR" property="editTime" />
    <result column="edit_by" jdbcType="VARCHAR" property="editBy" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, owner, name, start_date, end_date, cost, description, create_time, create_by, 
    edit_time, edit_by
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from tbl_activity
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from tbl_activity
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="com.gsf.CRM.workbench.pojo.Activity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into tbl_activity (id, owner, name, start_date, 
      end_date, cost, description, 
      create_time, create_by, edit_time, 
      edit_by)
    values (#{id,jdbcType=CHAR}, #{owner,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{startDate,jdbcType=CHAR},
      #{endDate,jdbcType=CHAR}, #{cost,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
      #{createTime,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR}, #{editTime,jdbcType=CHAR},
      #{editBy,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.gsf.CRM.workbench.pojo.Activity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into tbl_activity
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="owner != null">
        owner,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="startDate != null">
        start_date,
      </if>
      <if test="endDate != null">
        end_date,
      </if>
      <if test="cost != null">
        cost,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createBy != null">
        create_by,
      </if>
      <if test="editTime != null">
        edit_time,
      </if>
      <if test="editBy != null">
        edit_by,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="owner != null">
        #{owner,jdbcType=CHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null">
        #{startDate,jdbcType=CHAR},
      </if>
      <if test="endDate != null">
        #{endDate,jdbcType=CHAR},
      </if>
      <if test="cost != null">
        #{cost,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null">
        #{editTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null">
        #{editBy,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.gsf.CRM.workbench.pojo.Activity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update tbl_activity
    <set>
      <if test="owner != null">
        owner = #{owner,jdbcType=CHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="startDate != null">
        start_date = #{startDate,jdbcType=CHAR},
      </if>
      <if test="endDate != null">
        end_date = #{endDate,jdbcType=CHAR},
      </if>
      <if test="cost != null">
        cost = #{cost,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=CHAR},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=VARCHAR},
      </if>
      <if test="editTime != null">
        edit_time = #{editTime,jdbcType=CHAR},
      </if>
      <if test="editBy != null">
        edit_by = #{editBy,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.gsf.CRM.workbench.pojo.Activity">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update tbl_activity
    set owner = #{owner,jdbcType=CHAR},
      name = #{name,jdbcType=VARCHAR},
      start_date = #{startDate,jdbcType=CHAR},
      end_date = #{endDate,jdbcType=CHAR},
      cost = #{cost,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=CHAR},
      create_by = #{createBy,jdbcType=VARCHAR},
      edit_time = #{editTime,jdbcType=CHAR},
      edit_by = #{editBy,jdbcType=VARCHAR}
    where id = #{id,jdbcType=CHAR}
  </update>

  <!--
           * 添加一个活动的方法
           * @param activity  参数是活动Activity实现类
           * @return  返回受影响的行数
          int insertActivity(Activity activity);
  -->
  <insert id="insertActivity" parameterType="activity">
    insert into tbl_activity (id,owner,name,start_date,end_date,cost,description,create_time,create_by) values
      (#{id,jdbcType=CHAR}, #{owner,jdbcType=CHAR}, #{name,jdbcType=VARCHAR}, #{startDate,jdbcType=CHAR},
       #{endDate,jdbcType=CHAR}, #{cost,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR},
       #{createTime,jdbcType=CHAR}, #{createBy,jdbcType=VARCHAR})
  </insert>

  <!--
     * 分页查询所有符合要求的数据，封装在一个Map集合中
     * @param map   封装前端提交的数据
     * @return     将封装了符合要求的活动全部封装到List集合中返回给前端
    List<Activity> selectActivityByConditionForPage(Map<String,Object> map);
  -->
  <select id="selectActivityByConditionForPage" parameterType="map" resultMap="BaseResultMap">
    select a.id,u1.name as owner,a.name,a.start_date,a.end_date,a.cost,a.description,a.create_time,
    u2.name as create_by,a.edit_time,u3.name as edit_by
    from tbl_activity a
    join tbl_user u1 on a.owner=u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    <where>
      <if test="name!=null and name!=''">
        and a.name like concat('%',#{name},'%')
      </if>
      <if test="owner!=null and owner!=''">
        and u1.name like concat('%',#{owner},'%')
      </if>
      <if test="startDate!=null and startDate!=''">
        and a.start_date&gt;=#{startDate}
      </if>
      <if test="endDate!=null and endDate!=''">
        and a.end_date&lt;=#{endDate}
      </if>
    </where>
    order by a.create_time desc
    limit #{beginNo},#{pageSize}
  </select>

  <select id="selectCountOfActivityByCondition" parameterType="map" resultType="int">
    select count(*)
    from tbl_activity a
    join tbl_user u1 on a.owner=u1.id
    join tbl_user u2 on a.create_by=u2.id
    left join tbl_user u3 on a.edit_by=u3.id
    <where>
      <if test="name!=null and name!=''">
        and a.name like concat('%',#{name},'%')
      </if>
      <if test="owner!=null and owner!=''">
        and u1.name like concat('%',#{owner},'%')
      </if>
      <if test="startDate!=null and startDate!=''">
        and a.start_date&gt;=#{startDate}
      </if>
      <if test="endDate!=null and endDate!=''">
        and a.end_date&lt;=#{endDate}
      </if>
    </where>
  </select>

  <!--
           * 根据市场活动id删除对应的市场活动
           * @param ids   前端传过来的id封装成一个数组
           * @return  返回受影响的记录条数
          int deleteActivityByIds(String[] ids);
  -->
  <delete id="deleteActivityByIds" parameterType="string">
    delete from tbl_activity where id in
    <foreach collection="array" item="id" separator="," open="(" close=")">
        #{id}
    </foreach>
  </delete>

  <!--
     * 根据id查询市场活动
     * @param id    市场活动的id
     * @return  返回那个被查询到的市场活动
    Activity selectActivityById(String id);
  -->
  <select id="selectActivityById" parameterType="string" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"></include>
    from tbl_activity
    where id=#{id}
  </select>

  <!--
     * 根据activity实体类对象中的id值修改对应的市场活动
     * @param activity  前端传过来的市场活动信息封装在一个实体类中
     * @return  返回修改的记录条数
    int updateActivity(Activity activity);
  -->
  <update id="updateActivity" parameterType="activity">
    update tbl_activity set
    owner=#{owner},name=#{name},start_date=#{startDate},end_date=#{endDate},cost=#{cost},description=#{description},
    edit_time=#{editTime},edit_by=#{editBy}
    where id=#{id}
</update>

  <!--
     * 查询所有的市场活动
     * @return  返回一个存储了全部市场活动的List集合
    List<Activity> selectAllActivity();
  -->
  <select id="selectAllActivity" resultMap="BaseResultMap">
    select a.id,u1.name as owner,a.name,a.start_date,a.end_date,a.cost,a.description,a.create_time,
        u2.name as create_by,a.edit_time,u3.name as edit_by
        from tbl_activity a
        join tbl_user u1 on a.owner=u1.id
        join tbl_user u2 on a.create_by=u2.id
        left join tbl_user u3 on a.edit_by=u3.id
        order by  a.create_time desc
  </select>

  <!--
     * 通过市场活动的id查询市场活动
     * @param id    前端传过来的多个id封装在数组中
     * @return  返回一个List集合
    List<Activity> selectActivityByIds(String[] id);
  -->
  <select id="selectActivityByIds" parameterType="string" resultMap="BaseResultMap">
    select a.id,u1.name as owner,a.name,a.start_date,a.end_date,a.cost,a.description,a.create_time,
            u2.name as create_by,a.edit_time,u3.name as edit_by
            from tbl_activity a
            join tbl_user u1 on a.owner=u1.id
            join tbl_user u2 on a.create_by=u2.id
            left join tbl_user u3 on a.edit_by=u3.id
            where a.id in
            <foreach collection="array" item="id" separator="," open="(" close=")">
              #{id}
            </foreach>
            order by a.create_time desc
  </select>

  <!--
     * 批量插入市场活动
     * @param activityList  Controller层将若干条市场活动封装到list集合中
     * @return  返回受影响的记录条数
    int insertImportActivity(List<Activity> activityList);
  -->
  <insert id="insertImportActivity" parameterType="activity">
    insert into tbl_activity
    (id, owner, name, start_date,end_date, cost, description,create_time, create_by)
    value
    <foreach collection="list" separator="," item="activity">
        (#{activity.id},#{activity.owner},#{activity.name},#{activity.startDate},#{activity.endDate},#{activity.cost},
        #{activity.description},#{activity.createTime},#{activity.createBy})
    </foreach>
  </insert>

  <!--
     * 查看市场活动明细的功能，中的根据市场活动id查询市场活动所有细节的方法
     * @param id    市场活动的id
     * @return  返回一个市场活动对象
    Activity selectActivityForDetail(int id);
  -->
  <select id="selectActivityForDetail" parameterType="string" resultMap="BaseResultMap">
    select a.id,u1.name as owner,a.name,a.start_date,a.end_date,a.cost,a.description,a.create_time,
        u2.name as create_by,a.edit_time,u3.name as edit_by
        from tbl_activity a
        join tbl_user u1 on a.owner=u1.id
        join tbl_user u2 on a.create_by=u2.id
        left join tbl_user u3 on a.edit_by=u3.id
        where a.id=#{id}
  </select>

  <!--
     * 根据线索id，将tbl_clue_activity_relation和tbl_activity连接
     * @param clueId    前端传过来的线索id
     * @return  返回一个List，存储了市场活动
    List<Activity> selectActivityForDetailByClueId(String clueId);
  -->
  <select id="selectActivityForDetailByClueId" parameterType="string" resultMap="BaseResultMap">
    select a.id,u1.name as owner,a.name,a.start_date,a.end_date
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    join tbl_clue_activity_relation car on a.id = car.activity_id
    where car.clue_id = #{clueId}
    order by a.create_time desc
  </select>

  <!--
     * 根据市场活动名字模糊查询市场活动，除去clueId关联的市场活动
     * @return      返回市场活动的List集合
    List<Activity> selectActivityForDetailByNameAndClueId(Map<String,Object>);
  -->
  <select id="selectActivityForDetailByNameAndClueId" parameterType="map" resultMap="BaseResultMap">
    select a.id,a.name,a.start_date,a.end_date,u1.name as owner
    from tbl_activity a
    join tbl_user u1 on a.owner = u1.id
    where a.name like concat('%',#{activityName},'%') and a.id not in(
        select activity_id
        from tbl_clue_activity_relation
        where clue_id = #{clueId}
      )
  </select>
</mapper>